@using BlazorApp.Models
@inject HttpClient httpClient
@inject NavigationManager navigationManager

@if (courses == null)
{
    <p>Loading courses...</p>
    
}
else
{
    foreach (var course in courses)
    {
        <div class="box" >
            <a class="course-button" href="/courses/@course.Id">
                @if (course.IsBestseller)
                {
                    <div class="bestseller">Best Seller</div>
                }
                               

                <img src="@course.ImageUri" alt="@course.Title">
                <h5>@course.Title</h5>
                <div>By @course.Author</div>
                @if (course.DiscountPrice == 0)
                {
                    <div class="normal-price">$@course.OriginalPrice</div>
                }
                else
                {
                    <div class="discount-price">$@course.DiscountPrice</div>
                    <del>$@course.OriginalPrice</del>
                }
                <hr />
                <div class="course-bottom">
                    <div><i class="fa-regular fa-clock"></i>@course.Hours</div>
                    <div>
                        <div><i class="fa-regular fa-thumbs-up"></i>@course.LikesInPercent (@course.LikesInNumbers)</div>
                        <div></div>
                    </div>
                </div>
            </a>
        </div>
    }
}


@code {
    private new List<Course>? courses;


    protected override async Task OnInitializedAsync()
    {

        var query = new GraphQLQuery { Query = "{getAllCourses {id title authors {name} imageUri prices {price discount} hours likesInPercent likes isBestseller }}" };
        var response = await httpClient.PostAsJsonAsync("https://courseprovider-ek.azurewebsites.net/api/graphql?", query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            courses = result?.Data.GetProperty("getAllCourses").EnumerateArray()
                .Select(course => new Course
                    {
                        Id = course.GetProperty("id").GetString(),
                        IsBestseller = course.GetProperty("isBestseller").GetBoolean(),
                        ImageUri = course.GetProperty("imageUri").GetString(),
                        Title = course.GetProperty("title").GetString(),
                        Author = course.GetProperty("authors")[0].GetProperty("name").GetString(),
                        OriginalPrice = course.GetProperty("prices").GetProperty("price").GetDouble(),
                        DiscountPrice = course.GetProperty("prices").GetProperty("discount").GetDouble(),


                        Hours = course.GetProperty("hours").GetString(),
                        LikesInPercent = course.GetProperty("likesInPercent").GetString(),
                        LikesInNumbers = course.GetProperty("likes").GetString()


                    })
                .ToList();

        }
    }

    [Parameter] public EventCallback<string> OnCourseSelected { get; set; }

    public void SelectCourse(string courseId)
    {
        OnCourseSelected.InvokeAsync(courseId);
    }

    public void NavigateToCourse(string id)
    {
        navigationManager.NavigateTo($"courses/{id}");
    }
}


