@page "/signup"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BlazorApp.Helpers
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorApp.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<SignUp> Logger
@inject NavigationManager NavigationManager

<PageTitle>Create Account</PageTitle>


<section id="signup">
    <div class="container">

        <EditForm Model="Input" method="post" asp-route-returnUrl="@ReturnUrl" OnValidSubmit="RegisterUser" FormName="signup" novalidate>
            <DataAnnotationsValidator />
          
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger">
                    @ErrorMessage
                </div>
            }
            <h1>Create Account</h1>
            <p>Already have an account? <a href="/signin">Sign in here</a>.</p>
                    

            <div class="content">
                <div id="form-firstname" class="input-group">
                    <label>First name</label>
                    <InputText @bind-Value="Input.FirstName" autocomplete="givenname" aria-required="true" placeholder="Enter your first name" />
                    <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                </div>
                <div id="form-lastname" class="input-group">
                    <label>Last name</label>
                    <InputText @bind-Value="Input.LastName" autocomplete="surname" aria-required="true" placeholder="Enter your last name" />
                    <ValidationMessage For="() => Input.LastName" class="text-danger" />
                </div>
                <div id="form-email" class="input-group">
                    <label>Email</label>
                    <InputText type="email" @bind-Value="Input.Email" autocomplete="email" aria-required="true" placeholder="Enter your email address" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div id="form-password" class="input-group">
                    <label>Password</label>
                    <InputText type="password" @bind-Value="Input.Password" autocomplete="password" aria-required="true" placeholder="Enter your password" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div id="form-confirm" class="input-group">
                    <label>Confirm password</label>
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" autocomplete="confirm" aria-required="true" placeholder="Confirm your password" />
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
                <div id="form-terms" class="checkbox">
                    <div class="checkbox-group">
                        <InputCheckbox type="password" @bind-Value="Input.TermsAndConditions" autocomplete="terms" aria-required="true"  />
                        <label asp-for="Form.TermsAndConditions">I agree to the <NavLink href="Terms">Terms</NavLink> & <NavLink href="About" asp-action="Conditions">Conditions</NavLink></label>
                    </div>
                    <ValidationMessage For="() => Input.TermsAndConditions" class="text-danger" />
                    
                </div>

            </div>
            <button id="form-submit" class="btn-theme-s" type="submit">Sign up</button>
        </EditForm>
    </div>
</section>

@code {
    private string? ErrorMessage { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = new ApplicationUser 
        { 
            FirstName = Input.FirstName,
            LastName = Input.LastName,
            UserName = Input.Email, 
            Email = Input.Email

        };

        if(await UserManager.Users.AnyAsync(x => x.Email == user.Email))
        {
            ErrorMessage = "Email is already registered.";
            return;
        }

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            return;
        }


        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            NavigationManager.NavigateTo($"/Confirm?email={user.Email}");
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        NavigationManager.NavigateTo(ReturnUrl ?? "/");
    }



    private sealed class InputModel
    {
        [Required]
        [Display(Name = "First name")]
        public string FirstName { get; set; } = null!;

        [Required]
        [Display(Name = "Last name")]
        public string LastName { get; set; } = null!;

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        [RegularExpression(@"^[\w\.-]+@[a-zA-Z\d\.-]+\.[a-zA-Z]{2,}$", ErrorMessage = "Incorrect email format.")]
        public string Email { get; set; } = "";

        [Required]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", ErrorMessage = "Password must be at least 8 characters and contain at least one lowercase letter, one uppercase letter, one numeric digit, and one special character.")]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Display(Name = "I agree to the terms & conditions")]
        [CheckboxRequired]
        public bool TermsAndConditions { get; set; } = false;
    }
}
