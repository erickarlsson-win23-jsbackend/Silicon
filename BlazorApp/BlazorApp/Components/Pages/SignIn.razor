@page "/signin"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<SignIn> Logger
@inject NavigationManager NavigationManager

<PageTitle>Welcome Back</PageTitle>



<section id="signin">
    <div class="container">
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="signin" novalidate>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger">
                    @ErrorMessage
                </div>
            }
            <h1>Welcome Back</h1>
            <p>Don't have an account yet? <NavLink href="/signup">Sign up here</NavLink>.</p>
            <div class="content">
                <div id="form-email" class="input-group">
                    <InputText @bind-Value="Input.Email" autocomplete="username" aria-required="true" placeholder="Enter your email address" />
                    <label for="email" class="form-label">Email</label>
                </div>
                <div id="form-password" class="input-group">
                    <InputText type="password" @bind-Value="Input.Password" autocomplete="current-password" aria-required="true" placeholder="Enter your password" />
                    <label for="password" class="form-label">Password</label>
                </div>
                <div id="form-remember" class="checkbox">
                    <div class="checkbox-group">
                        <InputCheckbox @bind-Value="Input.RememberMe" />
                        <label>Remember me</label>
                    </div>
                </div>
                <button id="form-submit" class="btn-theme-s" type="submit">Sign in</button>

                <NavLink id="form-forgot-password" href="/" onclick="">Forgot your password?</NavLink>
            </div>

        </EditForm>
    </div>
</section>

@code {
    private string? ErrorMessage { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {        
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo(ReturnUrl ?? "/");
        }        
        else
        {
            ErrorMessage = "Incorrect email or password";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
